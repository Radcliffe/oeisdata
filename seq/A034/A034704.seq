%I A034704 #9 Mar 20 2025 12:06:10
%S A034704 1,2,3,4,5,6,7,8,9,10,11,21,31,41,51,61,71,81,91,20,21,22,32,42,52,64,
%T A034704 128,256,512,30,31,32,33,81,243,729,2187,6561,19683,40,41,42,81,256,
%U A034704 1024,4096,16384,65536,262144,50,51,52,243,1024,3125,15625,78125
%N A034704 Largest number that can be made using only the digits of n, exponentiation and concatenation.
%H A034704 Dominic McCarty, <a href="/A034704/b034704.txt">Table of n, a(n) for n = 1..237</a>
%H A034704 Dominic McCarty, <a href="/A034704/a034704.png">Log-log scatterplot of first 1000 terms</a>
%e A034704 Using exponentiation and concatenation, the digits of 25 can be arranged to yield: 25, 52, 2^5, 5^2. The largest of these is 52, so a(25) = 52.
%e A034704 Using exponentiation and concatenation, the digits of 26 can be arranged to yield: 26, 62, 2^6, 6^2. The largest of these is 2^6, so a(26) = 2^6 = 64.
%o A034704 (Python)
%o A034704 def a(n):
%o A034704     if n < 10: return n
%o A034704     d = sorted(map(int,list(str(n))))
%o A034704     for q in [1,0]:
%o A034704         while q in d and (i := d.index(q)) != len(d)-1:
%o A034704             d.pop(i)
%o A034704             d[-1] = (d[-1]*10)+q
%o A034704     for q, r in [(2, 5), (3, 3)]:
%o A034704         if (len(d)) == 1: return d[0]
%o A034704         if d[-2] == q and d[-1] <= r:
%o A034704             d.pop(-2)
%o A034704             d[-1] = (d[-1]*10)+q
%o A034704     for i in range(len(d)-2,-1,-1): d[i] = d[i] ** d[i+1]
%o A034704     return d[0] # _Dominic McCarty_, Mar 15 2025
%K A034704 nonn,base,nice
%O A034704 1,2
%A A034704 _Erich Friedman_
