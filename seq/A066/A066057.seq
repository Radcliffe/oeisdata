%I A066057 #18 May 10 2025 23:13:44
%S A066057 0,0,1,0,1,0,1,0,1,0,1,2,1,2,1,0,1,0,1,4,5,0,-1,2,1,4,-1,0,-1,2,1,0,1,
%T A066057 0,1,-1,1,-1,1,2,1,-1,1,2,3,0,-1,-1,1,-1,3,0,1,2,3,2,1,2,3,2,-1,-1,1,
%U A066057 0,1,0,1,-1,1,2,1,4,3,0,11,-1,5,-1,-1,2,1,2,1,4,-1,0,-1,2,5,-1,-1,2,3,0,-1,-1,1,-1,3,0,1,4,1,10,11,-1,-1,0,-1,2,-1,4
%N A066057 'Reverse and Add' carried out in base 2 (cf. A062128); number of steps needed to reach a palindrome, or -1 if no palindrome is ever reached.
%C A066057 The analog of A033665 in base 2.
%H A066057 <a href="/index/Res#RAA">Index entries for sequences related to Reverse and Add!</a>
%H A066057 Klaus Brockhaus, <a href="/A058042/a058042.txt">On the'Reverse and Add!' algorithm in base 2</a>
%e A066057 10011 (19 in base 10) -> 10011 + 11001 = 101100 -> 101100 + 1101 = 111001 -> 111001 + 100111 = 1100000 -> 1100000 + 11 = 1100011 (palindrome) requires 4 steps, so a(19) = 4.
%t A066057 limit = 10^4; (* Assumes that there is no palindrome if none is found before "limit" iterations *)
%t A066057 Table[np = n; i = 0;
%t A066057  While[np != IntegerReverse[np, 2] && i < limit,
%t A066057   np = np + IntegerReverse[np, 2]; i++];
%t A066057 If[i >= limit, -1, i], {n, 0, 111}] (* _Robert Price_, Oct 14 2019 *)
%o A066057 (ARIBAS) function b2reverse(a: integer): integer; var n,i,rev: integer; begin n := bit_length(a); for i := 0 to n-1 do if bit_test(a,i) = 1 then rev := bit_set(rev,n-1-i); end; end; return rev; end; function a066057(mx,stop: integer); var c,k,m,rev: integer; begin for k := 0 to mx do c := 0; m := k; rev := b2reverse(m); while m <> rev and c < stop do inc(c); m := m + rev; rev := b2reverse(m); end; if c < stop then write(c); else write(-1); end; write(" "); end; end; a066057(120,300);
%Y A066057 Cf. A033665, A058042, A062128, A062130, A033865, A061561, A066058, A006995, A057148.
%K A066057 base,sign
%O A066057 0,12
%A A066057 _Klaus Brockhaus_, Dec 04 2001
