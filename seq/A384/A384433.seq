%I A384433 #12 Jun 05 2025 02:30:05
%S A384433 954,2961,4617,4851,4932,5013,5022,5031,5103,5112,5184,5238,5823,5913,
%T A384433 6012,6021,6102,6129,6147,6171,6180,6192,6210,6219,6291,6312,6321,
%U A384433 6417,6519,6915,6921,7125,7128,7149,7152,7182,7194,7218,7251,7281,7341,7416,7431
%N A384433 Integers k that are equal to the sum of at least two of their anagrams, which must have the same number of digits as k.
%C A384433 This sequence consists of integers k that are equal to the sum of at least two of their own digit permutations. All anagrams must have the same number of digits as k, so permutations with leading zeros are not allowed.
%C A384433 Unlike Osiris numbers (A319274), which are formed by summing permutations of digit subsamples, these numbers require the use of all digits in each term of the sum.
%H A384433 Gonzalo Martínez, <a href="/A384433/b384433.txt">Table of n, a(n) for n = 1..500</a>
%e A384433 4617 is in this list, since 4617 = 1467 + 1476 + 1674, where 1467, 1476 and 1674 are anagrams of 4617.
%o A384433 (Python)
%o A384433 from itertools import permutations
%o A384433 from functools import lru_cache
%o A384433 @lru_cache(maxsize=None)
%o A384433 def anagrams(k):
%o A384433     s = str(k)
%o A384433     return sorted({int(''.join(p)) for p in permutations(s) if p[0] != '0' and int(''.join(p)) != k})
%o A384433 def ok(k):
%o A384433     def back(i, acc):
%o A384433         if acc == k: return True
%o A384433         if acc > k or i == len(a): return False
%o A384433         return back(i + 1, acc + a[i]) or back(i + 1, acc)
%o A384433     a = anagrams(k)
%o A384433     return back(0, 0)
%o A384433 print([k for k in range(10, 10000) if ok(k)])
%Y A384433 Cf. A055098, A319274, A160851.
%K A384433 nonn,base,new
%O A384433 1,1
%A A384433 _Gonzalo Martínez_, May 28 2025
