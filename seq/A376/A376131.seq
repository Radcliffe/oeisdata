%I A376131 #45 Aug 22 2025 13:26:46
%S A376131 0,1,2,6,7,11,12,23,24,28,29,40,41,45,46,72,73,77,78,89,90,94,95,121,
%T A376131 122,126,127,138,139,143,144,201,202,206,207,218,219,223,224,250,251,
%U A376131 255,256,267,268,272,273,330,331,335,336,347,348,352,353,379,380,384,385,396,397,401,402,522,523
%N A376131 Total number of times all nodes fire in a chip-firing game starting with 2n chips at the root on an infinite binary tree with a loop at the root.
%C A376131 Adding a loop at the root makes the graph 3-regular: each vertex has degree 3.
%C A376131 The first differences of this sequence give A376132.
%H A376131 Yifan Xie, <a href="/A376131/b376131.txt">Table of n, a(n) for n = 1..10000</a>
%H A376131 Dillan Agrawal, Selena Ge, Jate Greene, Tanya Khovanova, Dohun Kim, Rajarshi Mandal, Tanish Parida, Anirudh Pulugurtha, Gordon Redwine, Soham Samanta, and Albert Xu, <a href="https://arxiv.org/abs/2501.06675">Chip-Firing on Infinite k-ary Trees</a>, arXiv:2501.06675 [math.CO], 2025. See p. 13.
%H A376131 Ryota Inagaki, Tanya Khovanova, and Austin Luo, <a href="https://doi.org/10.1007/s00026-025-00779-6">On Chip-Firing on Undirected Binary Trees</a>, Ann. Comb. (2025). See p. 24.
%H A376131 Wikipedia, <a href="https://en.wikipedia.org/wiki/Chip-firing_game">Chip-firing game</a>.
%F A376131 a(n) = Sum_{k=1..m-1}((k-1)*2^k+1)(b(k)+1), where m = floor(log_2(2*n+1)) and b(m)b(m-1)b(m-2)...b(1)b(0) is a binary representation of 2*n+1 in m+1 bits.
%e A376131 If there are four chips at the root, then the root fires and the process ends in a stable configuration.
%e A376131 If there are eight chips at the root, the root can fire three times, sending 3 chips to each child. After this, each child can fire once. After that the root has 4 chips and can fire again. The total number of fires is 6.
%p A376131 a:= n-> (l-> add(((i-2)*2^(i-1)+1)*(l[i]+1), i=2..nops(l)-1))(Bits[Split](2*n+1)):
%p A376131 seq(a(n), n=1..65);  # _Alois P. Heinz_, Sep 12 2024
%o A376131 (Python)
%o A376131 def f0(n):
%o A376131     if n <= 2:
%o A376131         return 0
%o A376131     else:
%o A376131         return (n+1) // 2 - 1 + f0((n+1)//2 - 1)
%o A376131 def a(n):
%o A376131     numchip = 2*n
%o A376131     total = 0
%o A376131     firetime = f0(numchip)
%o A376131     l = 0
%o A376131     while firetime > 0:
%o A376131         total += (2**l) * firetime
%o A376131         numchip = (numchip+1)//2 - 1
%o A376131         firetime = f0(numchip)
%o A376131         l += 1
%o A376131     return total
%o A376131 print([a(n) for n in range(1, 66)])
%Y A376131 Cf. A091090, A376116, A376132.
%K A376131 nonn
%O A376131 1,3
%A A376131 _Ryota Inagaki_, _Tanya Khovanova_, and _Austin Luo_, Sep 11 2024
