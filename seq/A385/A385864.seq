%I A385864 #16 Jul 22 2025 18:17:45
%S A385864 1,2,4,7,13,24,53,109,284,746,2416,8804
%N A385864 Number of simple graphs on n unlabeled vertices having a unique independence polynomial.
%H A385864 Sean A. Irvine, <a href="https://github.com/archmageirvine/joeis/blob/master/src/irvine/oeis/a385/A385864.java">Java program</a> (github)
%H A385864 Eric Weisstein's World of Mathematics, <a href="https://mathworld.wolfram.com/IndependencePolynomial.html">Independence Polynomial</a>.
%e A385864 For n = 3, a(3) = 4, since there are 4 graphs with 3 vertices that have a unique independence polynomial.
%o A385864 (Sage)
%o A385864 from sage.all import *
%o A385864 from sage.graphs.independent_sets import IndependentSets
%o A385864 from collections import defaultdict
%o A385864 def independence_polynomial(graph):
%o A385864     counts = {}
%o A385864     for indep_set in IndependentSets(graph):
%o A385864         k = len(indep_set)
%o A385864         counts[k] = counts.get(k, 0) + 1
%o A385864     R.<x> = PolynomialRing(QQ)
%o A385864     poly = sum(c * x^k for k, c in sorted(counts.items()))
%o A385864     return poly
%o A385864 def a(n):
%o A385864     all_graphs = list(graphs(n))
%o A385864     poly_to_graphs = defaultdict(list)
%o A385864     for G in all_graphs:
%o A385864         poly = independence_polynomial(G)
%o A385864         poly_to_graphs[poly].append(G)
%o A385864     count = 0
%o A385864     for poly, graph_list in poly_to_graphs.items():
%o A385864         if len(graph_list) == 1:
%o A385864             count += 1
%o A385864     return count
%Y A385864 Cf. A263855.
%K A385864 nonn,more
%O A385864 1,2
%A A385864 _Soham Samanta_ and Laura Pierson, Jul 10 2025
%E A385864 a(10)-a(12) from _Sean A. Irvine_, Jul 17 2025
