%I A162936 #20 Mar 04 2025 15:21:51
%S A162936 1,2,4,6,12,24,60,120,240,360,840,1680,2520,5040,10080,27720,55440,
%T A162936 110880,332640,720720,1441440,4324320,21621600,73513440,367567200,
%U A162936 735134400,1396755360,6983776800,13967553600,27935107200,160626866400,321253732800,642507465600
%N A162936 Highly composite numbers (A002182) whose following highly composite number is at least 3/2 times greater.
%C A162936 While it can be proved that the related sequence A162935 is finite, I'm not sure whether this sequence is also finite.
%C A162936 Ramanujan proved that the asymptotic limit of the ratio between consecutive highly composite numbers is 1. Therefore this sequence is finite. Erdős proved that for two consecutive highly composite numbers k < k', k'/k <= 1 + 1/log(k)^c with c = 3/32. Nicolas improved the value to c = log(15/8)/(8*log(2)) = 0.113... thus the largest term of this sequence is below exp(2^(1/c)) < 3 * 10^196. By checking the terms of A002182 up to this bound it was found that there are 62 terms in this sequence, the largest is being A002182(1349) ~ 1.158... * 10^98. - _Amiram Eldar_, Aug 20 2019
%H A162936 Amiram Eldar, <a href="/A162936/b162936.txt">Table of n, a(n) for n = 1..62</a>
%H A162936 Paul Erdős, <a href="https://doi.org/10.1112/jlms/19.75_Part_3.130">On highly composite numbers</a>, Journal of the London Mathematical Society, Vol. 19, No. 75 (1944), pp. 130-133, <a href="https://users.renyi.hu/~p_erdos/1944-04.pdf">alternative link</a>.
%H A162936 Jean-Louis Nicolas, <a href="https://doi.org/10.4153/CJM-1971-012-6">Répartition des nombres hautement composés de Ramanujan</a>, Canadian Journal of Mathematics, Vol. 23, No. 1 (1971), pp. 116-130.
%H A162936 Srinivasa Ramanujan, <a href="https://doi.org/10.1112/plms/s2_14.1.347">Highly composite numbers</a>, Proceedings of the London Mathematical Society, Series 2, Vol. 14, No. 1 (1915), pp. 347-409, <a href="http://ramanujan.sirinudi.org/Volumes/published/ram15.html">alternative link</a>.
%o A162936 (Haskell)
%o A162936 import Data.Ratio
%o A162936 import Data.Set (Set)
%o A162936 import qualified Data.Set as Set
%o A162936 printList :: (Show a) => [a] -> IO()
%o A162936 printList = putStr . concat . map (\x -> show x ++ "\n")
%o A162936 isPrime n
%o A162936   | n >= 2 = all isNotDivisor $ takeWhile smallEnough primes
%o A162936   | otherwise = False
%o A162936   where
%o A162936     isNotDivisor d = n `mod` d /= 0
%o A162936     smallEnough d = d^2 <= n
%o A162936 primes = 2 : filter isPrime [ 2 * n + 1 | n <- [1..] ]
%o A162936 primeSynthesis = partialSynthesis 1 primes
%o A162936   where
%o A162936     partialSynthesis n _ [] = n
%o A162936     partialSynthesis n (p:ps) (c:cs) = partialSynthesis (n * p^c) ps cs
%o A162936 primeAnalysis n
%o A162936   | n < 1 = undefined
%o A162936   | n == 1 = []
%o A162936   | n > 1 = reverse $ buildPrimeCounts [0] n
%o A162936   where
%o A162936     buildPrimeCounts (c:cs) n
%o A162936       | n == 1 = (c:cs)
%o A162936       | n `mod` p == 0 = buildPrimeCounts (c+1 : cs) (n `div` p)
%o A162936       | otherwise = buildPrimeCounts (0:c:cs) n
%o A162936       where p = primes !! (length cs)
%o A162936 divisorCount n = product $ map (+1) $ primeAnalysis n
%o A162936 primorialProducts = resFrom 1
%o A162936   where
%o A162936     resFrom n = resBetween n (4*n - 1) ++ resFrom (4*n)
%o A162936     resBetween start end = Set.toAscList $ Set.fromList $ unorderedList
%o A162936       where
%o A162936         unorderedList = filter (>= start) (1 : build 0 [])
%o A162936         build pos exponents
%o A162936           | nextNumber <= end = nextNumber : build 0 nextCombination
%o A162936           | newPrime = []
%o A162936           | otherwise = build (pos + 1) exponents
%o A162936           where
%o A162936             newPrime = pos >= length exponents
%o A162936             nextCombination
%o A162936               | newPrime = replicate (length exponents + 1) 1
%o A162936               | otherwise = replicate (pos + 1) ((exponents !! pos) + 1)
%o A162936                               ++ drop (pos + 1) exponents
%o A162936             nextNumber = primeSynthesis nextCombination
%o A162936 filterStrictlyMonotonicDivisorCount = filterRest 0
%o A162936   where
%o A162936     filterRest _ [] = []
%o A162936     filterRest lim (num:nums)
%o A162936       | divisorCount num > lim = num : filterRest (divisorCount num) nums
%o A162936       | otherwise = filterRest lim nums
%o A162936 highlyCompositeNumbers
%o A162936   = filterStrictlyMonotonicDivisorCount primorialProducts
%o A162936 findGaps [] = []
%o A162936 findGaps [_] = []
%o A162936 findGaps (x1:x2:xs)
%o A162936   | x1 * 3 <= x2 * 2 = (x1, x2) : findGaps (x2:xs)
%o A162936   | otherwise = findGaps (x2:xs)
%o A162936 main = mapM (putStrLn . show . fst) (findGaps highlyCompositeNumbers)
%Y A162936 Cf. A002182, A162935.
%K A162936 nonn,fini,full
%O A162936 1,2
%A A162936 Jan Behrens (jbe-oeis(AT)magnetkern.de), Jul 17 2009
%E A162936 a(32)-a(33) from _Amiram Eldar_, Aug 20 2019
