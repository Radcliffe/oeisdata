%I A108618 #40 May 05 2025 06:33:28
%S A108618 1,2,-1,-2,-3,-6,-6,1,4,3,0,-5,-10,-8,3,8,5,-2,-9,-12,-6,7,16,10,-9,
%T A108618 -18,-11,4,15,14,-2,-16,-20,-3,14,17,6,-12,-24,-11,10,21,14,-8,-22,
%U A108618 -20,3,20,17,-2,-21,-24,-6,19,28,10,-21,-36,-18,19,40,22,-21,-42,-23,16,39,26,-14,-40,-32,9,38,29,-8,-39,-36,2,36,38,-1,-38
%N A108618 A quaternion-generated sequence calculated using the rules given in the comment box with initial seed x = .5'i + .5'j + .5'k + .5e; version: "tes".
%C A108618 Set y = x = .5'i + .5'j + .5'k + .5e Define a(0) = 1 (this is twice the coefficient of the unit e in x), then "loop" steps 1-5, below. a(n) is given by twice the coefficient of e (the unit) in y from step 4 inside the n-th loop. Step 1 (Loop 1): Calculate x*y Result: x*y = .5'i + .5'j + .5'k - .5e Step 2 (Loop 1): Add the fractional parts of the real coefficient basis vectors of x*y (i.e. 'i, 'j, 'k, e) Result: .5 + .5 + .5 - .5 = 1 = s Step 3 (Loop 1): Calculate x + x*y + se Result .5'i + .5'j + .5'k + .5e + (.5'i + .5'j + .5'k - .5e) + se = 'i + 'j + 'k + e. Step 4 (Loop 1): Set y equal to the result from Step 3. Result: y = 'i + 'j + 'k + e; thus a(1) = 2*1 = 2 Step 5 (Loop 1): Return to Step 1 Step 1 (Loop 2): Result: x*y = 'i + 'j + 'k - e Step 2 (Loop 2): Result: s = 0 Step 3 (Loop 2): 1.5'i + 1.5'j + 1.5'k -.5e Step 4 (Loop 2): y = 1.5'i + 1.5'j + 1.5'k -.5e; thus a(2) = 2*(-.5) = -1 **Loop 1** + 'i + 'j + 'k + e **Loop 2** + 1.5'i + 1.5'j + 1.5'k - .5e **Loop 3** + 'i + 'j + 'k - e **Loop 4** + .5'i + .5'j + .5'k - 1.5e **Loop 5** - 3e **Loop 6** - 'i - 'j - 'k - 3e **Loop 7** - 1.5'i - 1.5'j - 1.5'k + .5e **Loop 8** + 2e **Loop 9** + 1.5'i + 1.5'j + 1.5'k + 1.5e **Loop 10** + 2'i + 2'j + 2'k **Loop 11** + 1.5'i + 1.5'j + 1.5'k - 2.5e **Loop 12** - 5e
%C A108618 Notice the horizontal line segments in the graph of (a(n)) against the natural numbers. These may be referred to as "Gerald's diamonds" (after Gerald McGarvey, who pointed them out shortly after this sequence was submitted). It could be an interesting task to find the approximate area of these diamonds and compare to the approximate area of the other diamonds.
%C A108618 From _Benoit Jubin_, Aug 12 2009: (Start)
%C A108618 Define the function f on the integers to be the odd function such that for n>=0, f(2n)=0 and f(2n+1)=1. Define the sequences a and b by
%C A108618 a(0)=b(0)=0,
%C A108618 a(n+1) = 1 + (a(n)-3b(n))/2 + f((a(n)-3b(n))/2) + 3 f((a(n)+b(n))/2),
%C A108618 b(n+1) = 1 + (a(n)+b(n))/2.
%C A108618 Then (with an offset shifted by 1), a=A108618 and b=A108619. (End)
%H A108618 Creighton Dement, <a href="/A108618/b108618.txt">Table of n, a(n) for n = 0..10000</a>
%H A108618 Creighton Dement, <a href="/A108618/a108618a.jpg">Plot of A108618 against A108619 (patch on)</a>
%H A108618 Creighton Dement, <a href="/A108618/a108618b.jpg">Plot of A108618 against A108619 (patch off)</a>
%H A108618 Creighton Dement, <a href="https://www.mrob.com/pub/seq/CKD-2010.pdf">Floretions 2009, DRAFT</a>. See section 4.1 Algorithms.
%H A108618 Rémy Sigrist, <a href="/A108618/a108618.png">Colored scatterplot of a(n) for n = 0..10000</a> (where the color is function of n mod 6)
%t A108618 a[0] = b[0] = 0;
%t A108618 f[n_] := Sign[n]*Mod[n, 2];
%t A108618 a[n_] := a[n] = (1/2)*(a[n-1] - 3*b[n-1]) + 3*f[(1/2)*(a[n-1] + b[n-1])] + f[(1/2)*(a[n-1] - 3*b[n-1])] + 1;
%t A108618 b[n_] := b[n] = (1/2)*(a[n-1] + b[n-1]) + 1;
%t A108618 A108618 = Table[a[n], {n, 1, 100}] (* _Jean-François Alcover_, Feb 25 2015, after _Benoit Jubin_ *)
%Y A108618 Cf. A108619, A108620, A108621, A272693.
%K A108618 sign,hear,look
%O A108618 0,2
%A A108618 _Creighton Dement_, Jun 12 2005
