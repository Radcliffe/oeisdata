%I A293519 #15 Mar 14 2025 06:18:03
%S A293519 0,0,0,1,1,0,2,3,2,3,3,8,10,11,17,20,31,38,46,67,90,116,160,220,280,
%T A293519 397,509,685,927,1280,1663,2248,3056,4050,5383,7339,9714,13029,17714,
%U A293519 23738,31791,42793,57473,77175,103839,140100,187495,252068,338257,454325,611101,820924
%N A293519 Number of surviving (but not bifurcating) odd nodes at generation n in the binary tree of persistently squarefree numbers (see A293230).
%F A293519 a(n) = Sum_{k=(2^n)..(2^(1+n)-1)} abs(A293233(k)) * [1==A008966(2*k)] * [0==A008966(1+2*k)].
%F A293519 A293518(n) + a(n) = A293521(n).
%F A293519 A293518(n) - a(n) = A293517(n).
%e A293519 a(3) = 1 because in the binary tree illustrated in A293230, there is only one odd node at the level 3 (namely, the node 13) that spawns just one offspring.
%o A293519 (PARI)
%o A293519 \\ A naive algorithm (see A293518 for a better program):
%o A293519 up_to_level = 28;
%o A293519 up_to = (2^(1+up_to_level));
%o A293519 is_persistently_squarefree(n,base) = { while(n>1, if(!issquarefree(n),return(0)); n \= base); (1); };
%o A293519 { countsA293441 = 1; countsA293519 = 0; k=1; n=3; while(n <= 1+up_to,if(!bitand(n-1,n-2), write("b293441.txt", k, " ", countsA293441); write("b293519.txt", k, " ", countsA293519); print1(countsA293519,", "); countsA293441 = 0; countsA293519 = 0; k++); if(is_persistently_squarefree(n,2),countsA293441++; if(!issquarefree(1+(2*n)),countsA293519++)); n += 2); }
%o A293519 (Scheme)
%o A293519 (define (A293519 n) (add (lambda (k) (* (if (and (= 1 (A008966 (+ k k))) (= 0 (A008966 (+ 1 k k)))) 1 0) (abs (A293233 k)))) (A000079 n) (+ -1 (A000079 (+ 1 n)))))
%o A293519 ;; Implements sum_{i=lowlim..uplim} intfun(i)
%o A293519 (define (add intfun lowlim uplim) (let sumloop ((i lowlim) (res 0)) (cond ((> i uplim) res) (else (sumloop (1+ i) (+ res (intfun i)))))))
%Y A293519 Cf. A008966, A293230, A293233, A293517, A293518, A293521.
%K A293519 nonn
%O A293519 0,7
%A A293519 _Antti Karttunen_, Oct 16 2017
