%I A234000 #68 Mar 19 2025 16:01:09
%S A234000 1,4,9,16,17,25,33,36,41,49,57,64,65,68,73,81,89,97,100,105,113,121,
%T A234000 129,132,137,144,145,153,161,164,169,177,185,193,196,201,209,217,225,
%U A234000 228,233,241,249,256,257,260,265,272,273,281,289,292,297,305,313,321,324,329,337,345
%N A234000 Numbers of the form 4^i*(8*j+1).
%C A234000 Squares modulo all powers of 2. - _Robert Israel_, Aug 26 2014
%C A234000 From _Peter Munn_, Dec 11 2019: (Start)
%C A234000 Closed under multiplication.
%C A234000 Contains all even powers of primes.
%C A234000 A subgroup of the positive integers under the binary operation A059897(.,.). For all n, a(n) has no Fermi-Dirac factor of 2 and if m_k denotes the number of Fermi-Dirac factors of a(n) that are congruent to k modulo 8, m_3, m_5 and m_7 have the same parity. It can further be shown (1) all numbers that meet these requirements are in the sequence and (2) this implies closure under A059897(.,.).
%C A234000 (End)
%H A234000 Robert Israel, <a href="/A234000/b234000.txt">Table of n, a(n) for n = 1..10000</a>
%F A234000 a(n) = 6n + O(log n). - _Charles R Greathouse IV_, Dec 19 2013
%F A234000 a(n) = A055044(n)/2. - _Chai Wah Wu_, Mar 19 2025
%p A234000 N:= 1000: # to get all terms <= N
%p A234000 {seq(seq(4^i*(8*k+1), k = 0 .. floor((N * 4^(-i)-1)/8)),i=0..floor(log[4](N)))}; # _Robert Israel_, Aug 26 2014
%o A234000 (PARI) is_A234000(n)=(n/4^valuation(n, 4))%8==1 \\ _Charles R Greathouse IV_ and _V. Raman_, Dec 19 2013; minor improvement by _M. F. Hasler_, Jan 02 2014
%o A234000 (PARI) list(lim)=my(v=List(),t); for(e=0,logint(lim\1,4), t=4^e; forstep(k=t, lim, 8*t, listput(v,k))); Set(v) \\ _Charles R Greathouse IV_, Jan 12 2017
%o A234000 (Python)
%o A234000 from itertools import count, islice
%o A234000 def A234000_gen(startvalue=1): # generator of terms >= startvalue
%o A234000     return filter(lambda n:not (m:=(~n&n-1).bit_length())&1 and (n>>m)&7==1,count(max(startvalue,1)))
%o A234000 A234000_list = list(islice(A234000_gen(),30)) # _Chai Wah Wu_, Jul 09 2022
%o A234000 (Python)
%o A234000 def A234000(n):
%o A234000     def bisection(f,kmin=0,kmax=1):
%o A234000         while f(kmax) > kmax: kmax <<= 1
%o A234000         kmin = kmax >> 1
%o A234000         while kmax-kmin > 1:
%o A234000             kmid = kmax+kmin>>1
%o A234000             if f(kmid) <= kmid:
%o A234000                 kmax = kmid
%o A234000             else:
%o A234000                 kmin = kmid
%o A234000         return kmax
%o A234000     def f(x): return n+x-sum(((x>>(i<<1))-1>>3)+1 for i in range((x.bit_length()>>1)+1))
%o A234000     return bisection(f,n,n) # _Chai Wah Wu_, Feb 14 2025
%Y A234000 Cf. A055046 (Numbers of the form 4^i*(8*j+3)).
%Y A234000 Cf. A055045 (Numbers of the form 4^i*(8*j+5)).
%Y A234000 Cf. A004215 (Numbers of the form 4^i*(8*j+7)).
%Y A234000 Cf. A059897, A055044.
%K A234000 nonn,easy
%O A234000 1,2
%A A234000 _V. Raman_, Dec 18 2013
